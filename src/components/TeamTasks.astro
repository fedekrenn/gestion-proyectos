---
const { userRole } = Astro.props;

// Simulación de tareas
const allTasks = [
  { id: 1, title: 'Revisar informes', assignedTo: 'Jefe', status: 'En progreso' },
  { id: 2, title: 'Supervisar proyecto A', assignedTo: 'Supervisor', status: 'Pendiente' },
  { id: 3, title: 'Analizar datos', assignedTo: 'Analista', status: 'Completada' },
  { id: 4, title: 'Preparar presentación', assignedTo: 'Jefe', status: 'Pendiente' },
  { id: 5, title: 'Coordinar equipo', assignedTo: 'Supervisor', status: 'En progreso' },
  { id: 6, title: 'Recopilar información', assignedTo: 'Analista', status: 'En progreso' },
];

function getTeamTasks(role) {
  switch (role) {
    case 'Jefe':
      return allTasks.filter(task => task.assignedTo !== 'Jefe');
    case 'Supervisor':
      return allTasks.filter(task => task.assignedTo === 'Analista');
    case 'Analista':
      return [];
    default:
      return [];
  }
}

const teamTasks = getTeamTasks(userRole);
---

<div class="task-list">
  <h2>Tareas de mi Equipo</h2>
  {teamTasks.length === 0 ? (
    <p>No hay tareas de equipo para mostrar.</p>
  ) : (
    <ul>
      {teamTasks.map(task => (
        <li key={task.id}>
          <strong>{task.title}</strong> - Asignado a: {task.assignedTo} - Estado: {task.status}
        </li>
      ))}
    </ul>
  )}
</div>

<style>
  .task-list {
    background-color: #2c2c2c;
    border-radius: 8px;
    padding: 1rem;
  }
  h2 {
    color: rgb(var(--accent-light));
    margin-bottom: 1rem;
  }
  ul {
    list-style-type: none;
    padding: 0;
  }
  li {
    background-color: #3a3a3a;
    border-radius: 4px;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
  }
</style>