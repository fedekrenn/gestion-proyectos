---
const { userRole } = Astro.props;

// Simulación de tareas iniciales
const initialTasks = [
  { id: 1, title: 'Revisar informes', assignedTo: 'Jefe', status: 'En progreso' },
  { id: 2, title: 'Supervisar proyecto A', assignedTo: 'Supervisor', status: 'Pendiente' },
  { id: 3, title: 'Analizar datos', assignedTo: 'Analista', status: 'Completada' },
  { id: 4, title: 'Preparar presentación', assignedTo: 'Jefe', status: 'Pendiente' },
  { id: 5, title: 'Coordinar equipo', assignedTo: 'Supervisor', status: 'En progreso' },
  { id: 6, title: 'Recopilar información', assignedTo: 'Analista', status: 'En progreso' },
];
---

<div class="task-container">
  <div class="task-list">
    <h2>Mis Tareas</h2>
    <div id="myTasks"></div>
    <form id="addTaskForm">
      <input type="text" id="newTaskTitle" placeholder="Nueva tarea" required>
      <button type="submit">Agregar Tarea</button>
    </form>
  </div>

  <div class="task-list">
    <h2>Tareas de mi Equipo</h2>
    <div id="teamTasks"></div>
  </div>
</div>

<script>
  const userRole = '{userRole}'; // Esto asegura que userRole esté disponible en el script del cliente
  let tasks = {JSON.stringify(initialTasks)};

  function renderTasks() {
    const myTasksElement = document.getElementById('myTasks');
    const teamTasksElement = document.getElementById('teamTasks');
    
    const myTasks = tasks.filter(task => task.assignedTo === userRole);
    const teamTasks = getTeamTasks(userRole);

    myTasksElement.innerHTML = renderTaskList(myTasks, true);
    teamTasksElement.innerHTML = renderTaskList(teamTasks, false);

    addEventListeners();
  }

  function renderTaskList(taskList, isMyTasks) {
    if (taskList.length === 0) {
      return '<p>No hay tareas para mostrar.</p>';
    }

    return `
      <ul>
        ${taskList.map(task => `
          <li key="${task.id}">
            <span class="${task.status === 'Completada' ? 'completed' : ''}">
              <strong>${task.title}</strong> - Estado: ${task.status}
            </span>
            ${isMyTasks ? `
              <button class="edit" data-id="${task.id}">Editar</button>
              <button class="delete" data-id="${task.id}">Eliminar</button>
              <button class="toggle" data-id="${task.id}">
                ${task.status === 'Completada' ? 'Reabrir' : 'Completar'}
              </button>
            ` : ''}
          </li>
        `).join('')}
      </ul>
    `;
  }

  function getTeamTasks(role) {
    switch (role) {
      case 'Jefe':
        return tasks.filter(task => task.assignedTo !== 'Jefe');
      case 'Supervisor':
        return tasks.filter(task => task.assignedTo === 'Analista');
      case 'Analista':
      default:
        return [];
    }
  }

  function addEventListeners() {
    document.querySelectorAll('.edit').forEach(button => {
      button.addEventListener('click', editTask);
    });

    document.querySelectorAll('.delete').forEach(button => {
      button.addEventListener('click', deleteTask);
    });

    document.querySelectorAll('.toggle').forEach(button => {
      button.addEventListener('click', toggleTaskStatus);
    });
  }

  function addTask(event) {
    event.preventDefault();
    const titleInput = document.getElementById('newTaskTitle');
    const title = titleInput.value.trim();
    if (title) {
      const newTask = {
        id: tasks.length + 1,
        title: title,
        assignedTo: userRole,
        status: 'Pendiente'
      };
      tasks.push(newTask);
      titleInput.value = '';
      renderTasks();
    }
  }

  function editTask(event) {
    const taskId = parseInt(event.target.dataset.id);
    const task = tasks.find(t => t.id === taskId);
    const newTitle = prompt('Editar tarea:', task.title);
    if (newTitle !== null) {
      task.title = newTitle.trim();
      renderTasks();
    }
  }

  function deleteTask(event) {
    const taskId = parseInt(event.target.dataset.id);
    tasks = tasks.filter(t => t.id !== taskId);
    renderTasks();
  }

  function toggleTaskStatus(event) {
    const taskId = parseInt(event.target.dataset.id);
    const task = tasks.find(t => t.id === taskId);
    task.status = task.status === 'Completada' ? 'Pendiente' : 'Completada';
    renderTasks();
  }

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    renderTasks();
    document.getElementById('addTaskForm').addEventListener('submit', addTask);
  });
</script>

<style>
  .task-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
  .task-list {
    background-color: #2c2c2c;
    border-radius: 8px;
    padding: 1rem;
  }
  h2 {
    color: rgb(var(--accent-light));
    margin-bottom: 1rem;
  }
  ul {
    list-style-type: none;
    padding: 0;
  }
  li {
    background-color: #3a3a3a;
    border-radius: 4px;
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  button {
    background-color: #4a4a4a;
    color: white;
    border: none;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 0.5rem;
  }
  button:hover {
    background-color: #5a5a5a;
  }
  .completed {
    text-decoration: line-through;
    color: #888;
  }
  form {
    margin-top: 1rem;
    display: flex;
  }
  input[type="text"] {
    flex-grow: 1;
    padding: 0.5rem;
    border: none;
    border-radius: 4px;
    margin-right: 0.5rem;
  }
</style>